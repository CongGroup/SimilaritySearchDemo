/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TMatchServer_H
#define TMatchServer_H

#include <thrift/TDispatchProcessor.h>
#include "ImageSearch_types.h"

namespace ImgMatch {

class TMatchServerIf {
 public:
  virtual ~TMatchServerIf() {}

  /**
   * Get the Binary of the Picture
   * @return the binary
   * 
   * @param fid
   */
  virtual void GetImage(std::string& _return, const std::string& fid) = 0;

  /**
   * Get the picture id list which is similar.
   * @return the fid list.
   * 
   * @param img
   * @param add
   */
  virtual void SearchSimilar(std::vector<std::string> & _return, const std::string& img, const bool add) = 0;
};

class TMatchServerIfFactory {
 public:
  typedef TMatchServerIf Handler;

  virtual ~TMatchServerIfFactory() {}

  virtual TMatchServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TMatchServerIf* /* handler */) = 0;
};

class TMatchServerIfSingletonFactory : virtual public TMatchServerIfFactory {
 public:
  TMatchServerIfSingletonFactory(const boost::shared_ptr<TMatchServerIf>& iface) : iface_(iface) {}
  virtual ~TMatchServerIfSingletonFactory() {}

  virtual TMatchServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TMatchServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<TMatchServerIf> iface_;
};

class TMatchServerNull : virtual public TMatchServerIf {
 public:
  virtual ~TMatchServerNull() {}
  void GetImage(std::string& /* _return */, const std::string& /* fid */) {
    return;
  }
  void SearchSimilar(std::vector<std::string> & /* _return */, const std::string& /* img */, const bool /* add */) {
    return;
  }
};


class TMatchServer_GetImage_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  TMatchServer_GetImage_args(const TMatchServer_GetImage_args&);
  TMatchServer_GetImage_args& operator=(const TMatchServer_GetImage_args&);
  TMatchServer_GetImage_args() : fid() {
  }

  virtual ~TMatchServer_GetImage_args() throw();
  std::string fid;

  void __set_fid(const std::string& val);

  bool operator == (const TMatchServer_GetImage_args & rhs) const
  {
    if (!(fid == rhs.fid))
      return false;
    return true;
  }
  bool operator != (const TMatchServer_GetImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMatchServer_GetImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_GetImage_args& obj);
};


class TMatchServer_GetImage_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~TMatchServer_GetImage_pargs() throw();
  const std::string* fid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_GetImage_pargs& obj);
};

typedef struct _TMatchServer_GetImage_result__isset {
  _TMatchServer_GetImage_result__isset() : success(false) {}
  bool success :1;
} _TMatchServer_GetImage_result__isset;

class TMatchServer_GetImage_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  TMatchServer_GetImage_result(const TMatchServer_GetImage_result&);
  TMatchServer_GetImage_result& operator=(const TMatchServer_GetImage_result&);
  TMatchServer_GetImage_result() : success() {
  }

  virtual ~TMatchServer_GetImage_result() throw();
  std::string success;

  _TMatchServer_GetImage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TMatchServer_GetImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TMatchServer_GetImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMatchServer_GetImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_GetImage_result& obj);
};

typedef struct _TMatchServer_GetImage_presult__isset {
  _TMatchServer_GetImage_presult__isset() : success(false) {}
  bool success :1;
} _TMatchServer_GetImage_presult__isset;

class TMatchServer_GetImage_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~TMatchServer_GetImage_presult() throw();
  std::string* success;

  _TMatchServer_GetImage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_GetImage_presult& obj);
};


class TMatchServer_SearchSimilar_args {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};

  TMatchServer_SearchSimilar_args(const TMatchServer_SearchSimilar_args&);
  TMatchServer_SearchSimilar_args& operator=(const TMatchServer_SearchSimilar_args&);
  TMatchServer_SearchSimilar_args() : img(), add(0) {
  }

  virtual ~TMatchServer_SearchSimilar_args() throw();
  std::string img;
  bool add;

  void __set_img(const std::string& val);

  void __set_add(const bool val);

  bool operator == (const TMatchServer_SearchSimilar_args & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    if (!(add == rhs.add))
      return false;
    return true;
  }
  bool operator != (const TMatchServer_SearchSimilar_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMatchServer_SearchSimilar_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_SearchSimilar_args& obj);
};


class TMatchServer_SearchSimilar_pargs {
 public:

  static const char* ascii_fingerprint; // = "7D61C9AA00102AB4D8F72A1DA58297DC";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x61,0xC9,0xAA,0x00,0x10,0x2A,0xB4,0xD8,0xF7,0x2A,0x1D,0xA5,0x82,0x97,0xDC};


  virtual ~TMatchServer_SearchSimilar_pargs() throw();
  const std::string* img;
  const bool* add;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_SearchSimilar_pargs& obj);
};

typedef struct _TMatchServer_SearchSimilar_result__isset {
  _TMatchServer_SearchSimilar_result__isset() : success(false) {}
  bool success :1;
} _TMatchServer_SearchSimilar_result__isset;

class TMatchServer_SearchSimilar_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  TMatchServer_SearchSimilar_result(const TMatchServer_SearchSimilar_result&);
  TMatchServer_SearchSimilar_result& operator=(const TMatchServer_SearchSimilar_result&);
  TMatchServer_SearchSimilar_result() {
  }

  virtual ~TMatchServer_SearchSimilar_result() throw();
  std::vector<std::string>  success;

  _TMatchServer_SearchSimilar_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TMatchServer_SearchSimilar_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TMatchServer_SearchSimilar_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMatchServer_SearchSimilar_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_SearchSimilar_result& obj);
};

typedef struct _TMatchServer_SearchSimilar_presult__isset {
  _TMatchServer_SearchSimilar_presult__isset() : success(false) {}
  bool success :1;
} _TMatchServer_SearchSimilar_presult__isset;

class TMatchServer_SearchSimilar_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~TMatchServer_SearchSimilar_presult() throw();
  std::vector<std::string> * success;

  _TMatchServer_SearchSimilar_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const TMatchServer_SearchSimilar_presult& obj);
};

class TMatchServerClient : virtual public TMatchServerIf {
 public:
  TMatchServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TMatchServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetImage(std::string& _return, const std::string& fid);
  void send_GetImage(const std::string& fid);
  void recv_GetImage(std::string& _return);
  void SearchSimilar(std::vector<std::string> & _return, const std::string& img, const bool add);
  void send_SearchSimilar(const std::string& img, const bool add);
  void recv_SearchSimilar(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TMatchServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TMatchServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TMatchServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SearchSimilar(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TMatchServerProcessor(boost::shared_ptr<TMatchServerIf> iface) :
    iface_(iface) {
    processMap_["GetImage"] = &TMatchServerProcessor::process_GetImage;
    processMap_["SearchSimilar"] = &TMatchServerProcessor::process_SearchSimilar;
  }

  virtual ~TMatchServerProcessor() {}
};

class TMatchServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TMatchServerProcessorFactory(const ::boost::shared_ptr< TMatchServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TMatchServerIfFactory > handlerFactory_;
};

class TMatchServerMultiface : virtual public TMatchServerIf {
 public:
  TMatchServerMultiface(std::vector<boost::shared_ptr<TMatchServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TMatchServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TMatchServerIf> > ifaces_;
  TMatchServerMultiface() {}
  void add(boost::shared_ptr<TMatchServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetImage(std::string& _return, const std::string& fid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetImage(_return, fid);
    }
    ifaces_[i]->GetImage(_return, fid);
    return;
  }

  void SearchSimilar(std::vector<std::string> & _return, const std::string& img, const bool add) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SearchSimilar(_return, img, add);
    }
    ifaces_[i]->SearchSimilar(_return, img, add);
    return;
  }

};

} // namespace

#endif
