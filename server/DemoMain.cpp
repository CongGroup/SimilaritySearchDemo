// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include "TMatchServer.h"
#include "TMatchServerHandler.h"

#include <fstream>
#include <string>
#include <vector>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;


using boost::shared_ptr;
using namespace std;
using namespace  ::ImgMatch;


int main(int argc, char** argv)
{

    initModule_nonfree();

    /*if(argc == 2)
    {

        TMatchServerHandler a;
        a.tiqutezheng(atoi(argv[1]));
    }*//*

    return 0;

    int workerCount = 15;
    int port = 9090;
    shared_ptr<TMatchServerHandler> handler(new TMatchServerHandler());
    shared_ptr<TProcessor> processor(new TMatchServerProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
    shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager (workerCount);
    shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
    threadManager -> threadFactory (threadFactory);
    threadManager -> start();
 
    TThreadedServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    

*/
    

boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());  
boost::shared_ptr<TMatchServerHandler> handler(new TMatchServerHandler());  
boost::shared_ptr<TProcessor> processor(new TMatchServerProcessor(handler));  
boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(9090));  
boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());  

TSimpleServer server(processor,  serverTransport,  transportFactory,  protocolFactory);  

server.serve();

/*


printf("finish");

    int port = 9090;
    shared_ptr<TMatchServerHandler> handler(new TMatchServerHandler());
    shared_ptr<TProcessor> processor(new TMatchServerProcessor(handler));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<ThreadManager> threadManager =  ThreadManager::newSimpleThreadManager(workerCount);
    shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
    threadManager->threadFactory(threadFactory);


    ats::TNonblockingServer server(processor,protocolFactory, port, threadManager);

    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));

    
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
    


    
    threadManager->threadFactory(threadFactory);

    threadManager->start();

    TThreadPoolServer server(processor,
                            serverTransport,
                            transportFactory,
                            protocolFactory,
                            threadManager);

    server.serve();
    */

    return 0;
}

